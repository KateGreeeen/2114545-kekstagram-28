/*Функция для проверки длины строки. Она принимает строку, которую нужно проверить,
и максимальную длину и возвращает true, если строка меньше или равна указанной длине,
и false, если строка длиннее. Эта функция нам пригодится для валидации формы.
Cтрока короче 20 символов:
имяФункции('проверяемая строка', 20);  true
 Длина строки ровно 18 символов:
имяФункции('проверяемая строка', 18);  true
Строка длиннее 10 символов:
имяФункции('проверяемая строка', 10);  false
*/

const findLessOrMore = (string, stringLength) => string.length <= stringLength;

findLessOrMore('проверяемая строка', 20);
findLessOrMore('проверяемая строка', 18);
findLessOrMore('проверяемая строка', 10);


/*Функция для проверки, является ли строка палиндромом. Палиндром — это слово или фраза,
которые одинаково читаются и слева направо и справа налево.
Строка является палиндромом:
  имяФункции('топот'); true
Несмотря на разный регистр, тоже палиндром:
  имяФункции('ДовОд'); true
Это не палиндром:
  имяФункции('Кекс');  false
Это палиндром:
имяФункции('Лёша на полке клопа нашёл ');  true
*/

const recognizePalindrom = (string) => {
  const tempString = string
    .toLowerCase()
    .replaceAll(' ', '');

  let invertedString = '';
  for (let i = tempString.length - 1; i >= 0; i = i - 1) {
    invertedString += tempString.at(i);
  }

  return tempString === invertedString;
};

recognizePalindrom('топот');
recognizePalindrom('ДовОд');
recognizePalindrom('Кекс');
recognizePalindrom('Лёша на полке клопа нашёл ');

/*Функция, которая принимает строку, извлекает содержащиеся в ней цифры от 0 до 9
и возвращает их в виде целого положительного числа. Если в строке нет ни одной цифры,
функция должна вернуть NaN:
имяФункции('2023 год');             2023
имяФункции('ECMAScript 2022');      2022
имяФункции('1 кефир, 0.5 батона'); 105
имяФункции('агент 007');            7
имяФункции('а я томат');            NaN

Если хотите усложнить задание, предусмотрите случай, когда вместо строки приходит число:
имяФункции(2023); // 2023
имяФункции(-1);   // 1
имяФункции(1.5);  // 15
*/

const extractNumber = (value) => {
  if (typeof value === 'number') {
    return Math.abs(value);
  }

  let result = '';

  for (let i = 0; i < value.length; i++) {
    if (!Number.isNaN(parseInt(value.at(i), 10))) {
      result += value.at(i);
    }
  }

  return parseInt(result, 10);
};

extractNumber('2023 год');
extractNumber('ECMAScript 2022');
extractNumber('1 кефир, 0.5 батона');
extractNumber('агент 007');
extractNumber('а я томат');

/*Функция, которая принимает три параметра: исходную строку, минимальную длину и строку
с добавочными символами — и возвращает исходную строку, дополненную указанными символами
до заданной длины. Символы добавляются в начало строки. Если исходная строка превышает
заданную длину, она не должна обрезаться. Если «добивка» слишком длинная, она обрезается с конца.
  Добавочный символ использован один раз
имяФункции('1', 2, '0');      // '01'
  Добавочный символ использован три раза
имяФункции('1', 4, '0');      // '0001'
  Добавочные символы обрезаны с конца
имяФункции('q', 4, 'werty');  // 'werq'
  Добавочные символы использованы полтора раза
имяФункции('q', 4, 'we');     // 'wweq'
  Добавочные символы не использованы, исходная строка не изменена
имяФункции('qwerty', 4, '0'); // 'qwerty'
*/

const myPadStart = (string, minLength, pad) => {
  const actualPad = minLength - string.length;
  if (actualPad <= 0) {
    return string;
  }
  return `${pad.slice(0, actualPad % pad.length)}${pad.repeat(actualPad / pad.length)}${string}`;
};

myPadStart('1', 2, '0');
myPadStart('1', 4, '0');
myPadStart('q', 4, 'werty');
myPadStart('q', 4, 'we');
myPadStart('qwerty', 4, '0');
